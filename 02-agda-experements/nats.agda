open import Relation.Binary.PropositionalEquality
open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.Nat using (‚Ñï; zero; suc; _<_; _‚â§?_; z‚â§n; s‚â§s; pred)
open import Data.Integer using (‚Ñ§; +_; -[1+_]; _+_)
open import Relation.Nullary using (¬¨_)
open import Function using (_‚àã_; _$_)

as-syntax : (A : Set) ‚Üí A ‚Üí A
as-syntax _ x = x
infix 0 as-syntax
syntax as-syntax A x = x ‚à∂ A

cong‚ÇÉ : ‚àÄ {A B C D : Set} {x y z a b c} (f : A ‚Üí B ‚Üí C ‚Üí D) ‚Üí x ‚â° a ‚Üí y ‚â° b ‚Üí z ‚â° c
  ‚Üí f x y z ‚â° f a b c
cong‚ÇÉ _ refl refl refl = refl

record Iso A B : Set where
  constructor _&_left_right_
  field
    left : A ‚Üí B
    right : B ‚Üí A
    leftinv : ‚àÄ {x : B} ‚Üí left (right x) ‚â° x
    rightinv : ‚àÄ {x : A} ‚Üí right (left x) ‚â° x

data ùîπ : Set where
  true : ùîπ
  false : ùîπ

id : {A : Set} ‚Üí A ‚Üí A
id x = x

double : ‚Ñï ‚Üí ‚Ñï
double zero = zero
double (suc n) = suc (suc (double n))

half~ : ‚Ñï ‚Üí ‚Ñï
half~ zero = zero
half~ (suc zero) = zero
half~ (suc (suc n)) = suc (half~ n)

if_then_else_ : {A : Set} ‚Üí ùîπ ‚Üí A ‚Üí A ‚Üí A
if true then a else _ = a
if false then _ else b = b

if-then-else-simple : {A : Set} {x y z : A} {b : ùîπ}
  ‚Üí b ‚â° true
  ‚Üí if b then x else y ‚â° z
  ‚Üí x ‚â° z
if-then-else-simple {A} {x} {y} {z} {b} bt ite =
  trans (cong‚ÇÉ if_then_else_ (sym bt) refl refl) ite

even? : ‚Ñï ‚Üí ùîπ
even? zero = true
even? (suc zero) = false
even? (suc (suc n)) = even? n

even-double : {a : ‚Ñï} ‚Üí even? (double a) ‚â° true
even-double {zero} = refl
even-double {suc zero} = refl
even-double {suc (suc n)} = even-double {n}

even-double-suc : {n : ‚Ñï} {b : ùîπ} ‚Üí even? (suc (suc n)) ‚â° b ‚Üí even? n ‚â° b
even-double-suc ev = ev

even-suc-double : {a : ‚Ñï} ‚Üí even? (suc (double a)) ‚â° false
even-suc-double {zero} = refl
even-suc-double {suc zero} = refl
even-suc-double {suc (suc n)} = even-suc-double {n}

double-refl : {n : ‚Ñï} ‚Üí double (suc n) ‚â° suc (suc (double n))
double-refl = refl

half~-double-ref : {n : ‚Ñï} ‚Üí half~ (double n) ‚â° n
half~-double-ref {zero} = refl
half~-double-ref {suc n} =
  trans (cong half~ refl)
  $ cong suc half~-double-ref

half~-suc-double-ref : {n : ‚Ñï} ‚Üí half~ (suc (double n)) ‚â° n
half~-suc-double-ref {zero} = refl
half~-suc-double-ref {suc n} =
  trans (cong half~ refl) (cong suc half~-suc-double-ref)

double-half~ : {n : ‚Ñï} ‚Üí even? n ‚â° true ‚Üí double (half~ n) ‚â° n
double-half~ {zero} even = refl
double-half~ {suc (suc n)} even = (cong suc (cong suc (double-half~ even)))

double-half~-suc : {n : ‚Ñï} ‚Üí even? (suc n) ‚â° false ‚Üí double (half~ (suc n)) ‚â° n
double-half~-suc {zero} sucodd = refl
double-half~-suc {suc (suc n)} sucodd = cong suc (cong suc (double-half~-suc sucodd))

to : ‚Ñï ‚Üí ‚Ñ§
to n = if even? n then (+ (half~ n)) else (-[1+ (half~ n)  ])

from : ‚Ñ§ ‚Üí ‚Ñï
from (+ n) = double n
from (-[1+ n ]) = suc (double n)

to‚Üífrom : {n : ‚Ñ§} ‚Üí to (from n) ‚â° n
to‚Üífrom {+_ zero} = refl
to‚Üífrom {+_ (suc n)} = cong‚ÇÉ if_then_else_ (even-double {n}) (cong +_ (cong suc half~-double-ref)) refl
to‚Üífrom { -[1+_] zero} = refl
to‚Üífrom { -[1+_] (suc n)} = cong‚ÇÉ if_then_else_ (even-suc-double {n}) refl (cong -[1+_] (cong suc half~-suc-double-ref))

from‚Üíto : {n : ‚Ñï} ‚Üí from (to n) ‚â° n
from‚Üíto {zero} = refl
from‚Üíto {suc n} with even? (suc n) | inspect even? (suc n)
from‚Üíto {suc n} | true  | [ eq ] = double-half~ eq
from‚Üíto {suc n} | false | [ eq ] = cong suc (double-half~-suc eq)

‚Ñï‚âÉ‚Ñ§ : Iso ‚Ñï ‚Ñ§
‚Ñï‚âÉ‚Ñ§ = to & from left to‚Üífrom right from‚Üíto
